1:HL["/_next/static/media/2aaf0723e720e8b9-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/5b284c7119f7d307.css",{"as":"style"}]
0:["1nTis7GZfnZCbSIdjW90j",[[["",{"children":["blog",{"children":[["slug","keras-progress-bar-pytorch","d"],{"children":["__PAGE__?{\"slug\":\"keras-progress-bar-pytorch\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/5b284c7119f7d307.css","precedence":"next"}]],"$L4"]]]]
5:HL["/_next/static/media/b89f66ecdb077e7f-s.p.woff2",{"as":"font","type":"font/woff2"}]
6:HL["/_next/static/css/5f679fa11fe6d7f1.css",{"as":"style"}]
7:I{"id":3015,"chunks":["185:static/chunks/app/layout-a78e7a37a1c8ab7c.js"],"name":"","async":false}
8:I{"id":7767,"chunks":["272:static/chunks/webpack-1dd3b446fbaabb6c.js","971:static/chunks/fd9d1056-44fe9588d0e5e7bc.js","596:static/chunks/596-27146c691e1092ff.js"],"name":"default","async":false}
9:I{"id":7920,"chunks":["272:static/chunks/webpack-1dd3b446fbaabb6c.js","971:static/chunks/fd9d1056-44fe9588d0e5e7bc.js","596:static/chunks/596-27146c691e1092ff.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"en","children":["$","body",null,{"className":"bg-[#1a1a1a] text-neutral-200 __className_20951f","children":["$","main",null,{"className":"flex min-h-screen flex-col items-center py-16 md:py-32 px-6","children":[["$","$L7",null,{"src":"https://www.googletagmanager.com/gtag/js?id=G-M55V0FS97Q"}],["$","$L7",null,{"id":"google-analytics","children":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n            \n              gtag('config', 'G-M55V0FS97Q');\n            "}],["$","div",null,{"className":"max-w-lg w-full flex flex-col","children":["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children",["slug","keras-progress-bar-pytorch","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$La","$Lb",null],"segment":"__PAGE__?{\"slug\":\"keras-progress-bar-pytorch\"}"},"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/5f679fa11fe6d7f1.css","precedence":"next"}]]}],"segment":["slug","keras-progress-bar-pytorch","d"]},"styles":[]}],"segment":"blog"},"styles":[]}]}]]}]}]}],null]
d:I{"id":9699,"chunks":["12:static/chunks/12-fa30109e9f5a99d5.js","308:static/chunks/app/blog/[slug]/page-fb6b1b72cfb6aeb3.js"],"name":"Highlight","async":false}
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Short Post"}],["$","meta","2",{"name":"description","content":"Using keras progress bars in custom python code"}],["$","meta","3",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","4",{"name":"next-size-adjust"}]]
a:null
c:Ta2d,<p>I really like the progress bars in keras API. So, this is how to add those progress bars in any python code.</p>
<p>Example with pytorch training loop.</p>
<pre><code class="language-python">import tensorflow as tf

n_epochs = 3
for epoch in range(n_epochs):
    n_batches = len(dataloader)
    print(f&#39;Epoch {epoch+1}/{n_epochs}&#39;)
    pbar = tf.keras.utils.Progbar(target=n_batches)
    for idx, batch in enumerate(dataloader):
        train_loss = train_step(batch)
        pbar.update(idx, values=[(&quot;loss&quot;,train_loss)])
    val_loss = validate()
    pbar.update(n_batches, values=[(&#39;val_loss&#39;, val_loss)])
</code></pre>
<p>Output:</p>
<pre><code class="language-text">Epoch 1/3
10/10 [==============================] - 2s 225ms/step - loss: 0.4698 - val_loss: 0.9111
Epoch 2/3
10/10 [==============================] - 2s 226ms/step - loss: 0.4626 - val_loss: 0.8433
Epoch 3/3
10/10 [==============================] - 2s 225ms/step - loss: 0.5835 - val_loss: 0.4997
</code></pre>
<p>Notes:  </p>
<ul>
<li>The metrics shown along with the progress bar are being averaged over each update.<br>So if the loss values for each batch over an epoch were [5,4,3,2,1], you would see the values [5, 4.5, 4, 3.5, 3] as the progress bar fills up.
If you need the raw values, you need to add an argument to the instantiation of the progress bar.
e.g.<pre><code class="language-python">pbar = tf.keras.utils.Progbar(target=n_batches, stateful_metrics=[&#39;loss&#39;])
</code></pre>
This would make the progress bar not average the values corresponding to the key <code>loss</code> during each update.</li>
<li>It&#39;s important to &quot;finish&quot; the progress bar by having the final <code>update</code> function contain the first argument as 
the <code>target</code> or total number of iterations set in the progress bar. e.g. The total in the progress bar was the number of batches or <code>n_batches</code>.
So, if you were skipping the validation step, you would still need to call <pre><code class="language-python">pbar.update(n_batches, values=None)
</code></pre>
after all the training batches were processed, to finish the progress bar. And it would only show the training loss this time.<br>Failing to do so will result in incomplete progress bars for each iterations that look like this.<pre><code class="language-text">Epoch 1/3
9/10 [==========================&gt;...] - ETA: 0s - loss: 0.4153Epoch 2/3
9/10 [==========================&gt;...] - ETA: 0s - loss: 0.4637Epoch 3/3
9/10 [==========================&gt;...] - ETA: 0s - loss: 0.5152
</code></pre>
</li>
</ul>
b:[["$","div",null,{"className":"mb-7 font-light","children":["â†– ",["$","a",null,{"rel":"","target":"","className":" text-neutral-200 underline underline-offset-2 transition-all duration-200 decoration-neutral-600 hover:decoration-neutral-400","href":"/blog","children":"Back"}]]}],["$","article",null,{"className":"__className_bfc3c1 leading-7 antialiased","children":[["$","h1",null,{"children":"Short Post"}],["$","p",null,{"className":"text-neutral-500","children":"27 October 2020"}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]]}],["$","$Ld",null,{}]]
